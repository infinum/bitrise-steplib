title: Deploy to iTunes Connect - Application Loader
summary: Uploads binaries (.ipa / .pkg files) to [iTunes Connect](https://itunesconnect.apple.com/).
description: "Upload your binaries to [iTunes Connect](https://itunesconnect.apple.com/)
  using Apple's Application Loader. You can upload iOS, macOS, or Apple TV apps with
  the Step. The Step does not upload metadata, screenshots, nor does it submit your
  app for review. For that, use the **Deploy to iTunesConnect** Step.\n\nThis Step,
  however, does NOT build your binary: to create an IPA or PKG file, you need the
  right version of the **Xcode Archive** Step, or any other Step that is capable of
  building a binary file.  \n\n### Configuring the Step \n\nBefore you start using
  this Step, you need to do a couple of things:\n\n* Register an app on the **My Apps**
  page of iTunes Connect. Click on the *plus sign* and select the **New App** option.
  This requires an **admin** account.\n* This Step requires an app signed with App
  Store Distibution provisioning profile. Make sure that you use the correct code
  signing files and the correct export method with the Step that builds your binary.\n*
  Every build that you want to push to iTunes Connect must have a unique build and
  version number pair. Increment either or both before a new deploy to iTunes Connect.\n\nTo
  deploy your app with the Step: \n1. Make sure that either the **IPA path** or the
  **PKG path** input has a valid value. The default value is perfect for most cases:
  it points to the output generated by the **Xcode Archive** Step.\n1. In the **Platform**
  input, set the platform of your app. If, for example, you have an iOS app, set it
  to `ios`. The Step will fail if this input isn't set correctly.\n1. Set up your
  connection depending on which authentication method you wish to use: with Apple
  ID or with the App Store Connet API key. Use only one of the authentication methods.
  \n  - For the Apple ID: Fill out the **Apple ID**, **Password**. Optionally, add
  the **Application specific password** if you wish to bypass two-factor authentication
  on iTunesConnect.\n  - For the App Store Connect API: Provide your **API Key URL**
  (for example, https://URL/TO/AuthKey_something.p8 or file:///PATH/TO/AuthKey_something.p8)
  and the **Issuer ID** inputs. Please note that connecting with the App Store Connect
  API works with XCode 11.0 and above releases.  \n\n### Troubleshooting\n\nUse only
  one of the authentication methods, if you add both the Apple ID and the API key
  inputs the step will fail.\n\nMake sure your Apple ID credentials are correct. Be
  aware that if you use two-factor authentication, you need to submit an application-specific
  password.\n\nAlways make sure that **Platform** input is set to the correct value.\n\nThe
  Step can also fail if the **Xcode Archive** Step - or any other Step that builds
  your binary - did not generate an IPA or PKG with a `app-store` export method. \n\n###
  Useful links \n\n- [Deploying an app to iTunesConnect](https://devcenter.bitrise.io/deploy/ios-deploy/deploying-an-ios-app-to-itunes-connect/)\n-
  [iOS deployment](https://devcenter.bitrise.io/deploy/ios-deploy/ios-deploy-index/)\n\n###
  Related Steps \n\n- [Deploy to Google Play](https://www.bitrise.io/integrations/steps/google-play-deploy)\n-
  [Xcode Archive & Export for iOS](https://www.bitrise.io/integrations/steps/xcode-archive)\n-
  [Appetize.io deploy](https://www.bitrise.io/integrations/steps/appetize-deploy)"
website: https://github.com/bitrise-steplib/steps-deploy-to-itunesconnect-application-loader
source_code_url: https://github.com/bitrise-steplib/steps-deploy-to-itunesconnect-application-loader
support_url: https://github.com/bitrise-steplib/steps-deploy-to-itunesconnect-application-loader/issues
published_at: 2020-11-20T12:44:16.0231941Z
source:
  git: https://github.com/bitrise-steplib/steps-deploy-to-itunesconnect-application-loader.git
  commit: fffcca0fdc7ce694ca984d9e02d9d582b5b68a06
project_type_tags:
- ios
- macos
- xamarin
- cordova
- ionic
- react-native
- flutter
type_tags:
- deploy
toolkit:
  go:
    package_name: github.com/bitrise-steplib/steps-deploy-to-itunesconnect-application-loader
inputs:
- itunescon_user: ""
  opts:
    description: Login Apple ID for the iTunes Connect site.
    is_sensitive: true
    title: Apple ID
- opts:
    description: |-
      Password for the specified Apple ID.
      **NOTE:** Password or Application specific password is required when itunescon_user is specified.
    is_sensitive: true
    title: Password
  password: ""
- app_password: ""
  opts:
    description: |-
      An Application specific password for the Apple ID.
      **NOTE:** Application specific passwords can be created on the
      [AppleID Website](https://appleid.apple.com). It can be used to
      surpass Two Factor Authentication.
      **NOTE:** Password or Application specific password is required when itunescon_user is specified.
    is_sensitive: true
    title: Application Specific Password
- ipa_path: $BITRISE_IPA_PATH
  opts:
    description: |-
      Path to your IPA file to be deployed.
      **NOTE:** This input or `PKG path` is required.
    title: IPA path
- opts:
    description: |-
      Path to your PKG file to be deployed.
      **NOTE:** This input or `IPA path` is required.
    title: PKG path
  pkg_path: $BITRISE_PKG_PATH
- api_key_path: ""
  opts:
    description: |-
      Specify the path in an URL format where your API key is stored.
      For example: `https://URL/TO/AuthKey_something.p8` or `file:///PATH/TO/AuthKey_something.p8`

      You can upload your key on the **Generic File Storage** tab in the Workflow Editor and set the environment variable for the file here.
      For example: `$BITRISEIO_MYKEY_URL`

      **NOTE:** Only available from XCode 11.0 and above.
    title: API Key URL
- api_issuer: ""
  opts:
    description: |-
      Issuer ID. Required if api_key_path is specified.

      **NOTE:** Only available from XCode 11.0 and above.
    title: Issuer ID
- altool_options: null
  opts:
    category: Debug
    description: |-
      Options added to the end of the `altool` call.
      You can use multiple options, separated by a space
      character. Example: `--notarize-app --asc-provider" <<provider_id>>`
    title: Additional options for `altool` call
